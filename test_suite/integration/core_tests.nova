// Core language feature tests

// Basic arithmetic tests
start_test_suite("Arithmetic Operations");
assert_equal(2 + 3, 5, "Addition");
assert_equal(10 - 4, 6, "Subtraction");
assert_equal(3 * 7, 21, "Multiplication");
assert_equal(15 / 3, 5, "Division");
assert_equal(-5, 0 - 5, "Unary minus");
finish_test_suite();

// Comparison tests
start_test_suite("Comparison Operations");
assert_true(5 > 3, "Greater than");
assert_false(2 > 5, "Greater than false");
assert_true(3 < 8, "Less than");
assert_false(8 < 3, "Less than false");
assert_true(5 >= 5, "Greater or equal");
assert_true(3 <= 7, "Less or equal");
assert_true(42 == 42, "Equality");
assert_true(5 != 3, "Inequality");
finish_test_suite();

// Logical operations tests
start_test_suite("Logical Operations");
assert_true(true and true, "AND true");
assert_false(true and false, "AND false");
assert_true(true or false, "OR true");
assert_false(false or false, "OR false");
assert_false(!true, "NOT true");
assert_true(!false, "NOT false");
finish_test_suite();

// Variable tests
start_test_suite("Variables");
let x = 42;
assert_equal(x, 42, "Variable assignment");
let y = x + 10;
assert_equal(y, 52, "Variable expression");
let name = "Nova";
assert_equal(name, "Nova", "String variable");
finish_test_suite();

// String tests
start_test_suite("Strings");
assert_equal("Hello" + " " + "World", "Hello World", "String concatenation");
assert_equal(len("hello"), 5, "String length");
assert_equal("test"[1], "e", "String indexing");
finish_test_suite();

// Array tests
start_test_suite("Arrays");
let arr = [1, 2, 3, 4, 5];
assert_equal(len(arr), 5, "Array length");
assert_equal(arr[0], 1, "Array indexing first");
assert_equal(arr[4], 5, "Array indexing last");
assert_equal([1, 2, 3], [1, 2, 3], "Array equality");
finish_test_suite();

// Function tests
start_test_suite("Functions");
fn add(a, b) {
    a + b
}
assert_equal(add(3, 4), 7, "Function call");

fn factorial(n) {
    if (n <= 1) {
        1
    } else {
        n * factorial(n - 1)
    }
}
assert_equal(factorial(5), 120, "Recursive function");

fn multiply(x) {
    fn inner(y) {
        x * y
    }
    inner
}
let double = multiply(2);
assert_equal(double(5), 10, "Closure");
finish_test_suite();

// Control flow tests
start_test_suite("Control Flow");
fn test_if(x) {
    if (x > 0) {
        "positive"
    } else {
        "negative"
    }
}
assert_equal(test_if(5), "positive", "If statement true");
assert_equal(test_if(-3), "negative", "If statement false");

let sum = 0;
let i = 1;
while (i <= 5) {
    sum = sum + i;
    i = i + 1;
}
assert_equal(sum, 15, "While loop");

let product = 1;
for num in [1, 2, 3, 4] {
    product = product * num;
}
assert_equal(product, 24, "For loop array");

let word = "";
for char in "abc" {
    word = word + char;
}
assert_equal(word, "abc", "For loop string");
finish_test_suite();

// Built-in function tests
start_test_suite("Built-in Functions");
assert_equal(type(42), "number", "type() number");
assert_equal(type("hello"), "string", "type() string");
assert_equal(type([1, 2, 3]), "array", "type() array");
assert_equal(type(true), "boolean", "type() boolean");
assert_equal(type(null), "null", "type() null");

assert_equal(str(123), "123", "str() number");
assert_equal(str(true), "true", "str() boolean");
assert_equal(num("42"), 42, "num() string");
assert_equal(num(true), 1, "num() true");
assert_equal(num(false), 0, "num() false");

let test_arr = [1, 2, 3];
let pushed = push(test_arr, 4);
assert_equal(pushed, [1, 2, 3, 4], "push() function");
assert_equal(pop([1, 2, 3]), 3, "pop() function");
finish_test_suite();

// Type system tests
start_test_suite("Type System");
assert_type(42, "number", "Number type");
assert_type("hello", "string", "String type");
assert_type(true, "boolean", "Boolean type");
assert_type([1, 2, 3], "array", "Array type");
assert_type(null, "null", "Null type");

fn test_func() { 42 }
assert_type(test_func, "function", "Function type");
finish_test_suite();

// Edge case tests
start_test_suite("Edge Cases");
assert_equal(0, 0, "Zero equality");
assert_equal("", "", "Empty string");
assert_equal([], [], "Empty array");
assert_true(null == null, "Null equality");
assert_false(0 == false, "Zero not equal to false");
assert_false("" == false, "Empty string not equal to false");
finish_test_suite();

// Nested structure tests
start_test_suite("Nested Structures");
let matrix = [[1, 2], [3, 4], [5, 6]];
assert_equal(matrix[1][0], 3, "2D array access");
assert_equal(len(matrix), 3, "2D array outer length");
assert_equal(len(matrix[0]), 2, "2D array inner length");

let nested_func = fn(x) {
    fn(y) {
        fn(z) {
            x + y + z
        }
    }
};
assert_equal(nested_func(1)(2)(3), 6, "Nested function calls");
finish_test_suite();

print_test_summary();