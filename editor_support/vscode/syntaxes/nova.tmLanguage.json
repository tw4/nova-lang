{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Nova",
    "version": "1.0.0",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#variables"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.nova",
                    "match": "\\b(if|else|while|for|in|return)\\b"
                },
                {
                    "name": "keyword.other.nova",
                    "match": "\\b(let|fn)\\b"
                },
                {
                    "name": "constant.language.nova",
                    "match": "\\b(true|false|null)\\b"
                },
                {
                    "name": "keyword.operator.logical.nova",
                    "match": "\\b(and|or|not)\\b"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.nova",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.nova",
                    "match": "\\\\."
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.float.nova",
                    "match": "\\b\\d+\\.\\d+\\b"
                },
                {
                    "name": "constant.numeric.integer.nova",
                    "match": "\\b\\d+\\b"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.nova",
                    "begin": "//",
                    "end": "$"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.nova",
                    "match": "[+\\-*/%]"
                },
                {
                    "name": "keyword.operator.comparison.nova",
                    "match": "(==|!=|<=|>=|<|>)"
                },
                {
                    "name": "keyword.operator.assignment.nova",
                    "match": "="
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.nova",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
                },
                {
                    "name": "support.function.builtin.nova",
                    "match": "\\b(print|len|type|str|num|push|pop)\\b"
                }
            ]
        },
        "variables": {
            "name": "variable.other.nova",
            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
    },
    "scopeName": "source.nova",
    "fileTypes": ["nova"]
}