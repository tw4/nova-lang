{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Nova",
    "version": "1.0.0",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#string-interpolation"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#classes"
        },
        {
            "include": "#builtin-functions"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#punctuation"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.nova",
                    "begin": "//",
                    "end": "$",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.nova"
                        }
                    }
                },
                {
                    "name": "comment.block.nova",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.nova"
                        }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.conditional.nova",
                    "match": "\\b(if|else|elif|switch|case|default)\\b"
                },
                {
                    "name": "keyword.control.repeat.nova",
                    "match": "\\b(while|for|in|do|loop)\\b"
                },
                {
                    "name": "keyword.control.flow.nova",
                    "match": "\\b(return|break|continue|yield)\\b"
                },
                {
                    "name": "keyword.control.exception.nova",
                    "match": "\\b(try|catch|finally|throw|throws)\\b"
                },
                {
                    "name": "keyword.control.import.nova",
                    "match": "\\b(import|from|export|as|use|module)\\b"
                },
                {
                    "name": "storage.type.nova",
                    "match": "\\b(let|const|fn|class|struct|enum|interface|type|trait)\\b"
                },
                {
                    "name": "storage.modifier.nova",
                    "match": "\\b(public|private|protected|static|final|abstract|virtual|override|async|await)\\b"
                },
                {
                    "name": "keyword.control.inheritance.nova",
                    "match": "\\b(extends|implements|super)\\b"
                },
                {
                    "name": "variable.language.nova",
                    "match": "\\b(this|self|super)\\b"
                },
                {
                    "name": "keyword.operator.new.nova",
                    "match": "\\b(new|delete)\\b"
                },
                {
                    "name": "entity.name.function.constructor.nova",
                    "match": "\\b(constructor|init|deinit)\\b"
                },
                {
                    "name": "constant.language.nova",
                    "match": "\\b(true|false|null|undefined|void)\\b"
                },
                {
                    "name": "keyword.operator.logical.nova",
                    "match": "\\b(and|or|not|is|in|instanceof|typeof)\\b"
                },
                {
                    "name": "keyword.other.nova",
                    "match": "\\b(with|match|when|where|select)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.nova",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.nova",
                            "match": "\\\\[\"'\\\\nrt0]"
                        },
                        {
                            "name": "constant.character.escape.unicode.nova",
                            "match": "\\\\u[0-9a-fA-F]{4}"
                        },
                        {
                            "name": "constant.character.escape.hex.nova",
                            "match": "\\\\x[0-9a-fA-F]{2}"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.nova",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.nova",
                            "match": "\\\\[\"'\\\\nrt0]"
                        }
                    ]
                }
            ]
        },
        "string-interpolation": {
            "patterns": [
                {
                    "name": "string.interpolated.nova",
                    "begin": "f\"",
                    "end": "\"",
                    "beginCaptures": {
                        "0": {"name": "string.interpolated.nova punctuation.definition.string.begin.nova"}
                    },
                    "endCaptures": {
                        "0": {"name": "string.interpolated.nova punctuation.definition.string.end.nova"}
                    },
                    "patterns": [
                        {
                            "name": "meta.embedded.expression.nova",
                            "begin": "\\${",
                            "end": "}",
                            "beginCaptures": {
                                "0": {"name": "punctuation.section.embedded.begin.nova"}
                            },
                            "endCaptures": {
                                "0": {"name": "punctuation.section.embedded.end.nova"}
                            },
                            "patterns": [
                                {"include": "$self"}
                            ]
                        },
                        {
                            "name": "string.interpolated.nova",
                            "match": "[^${}]+"
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.float.nova",
                    "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.integer.nova",
                    "match": "\\b\\d+\\b"
                },
                {
                    "name": "constant.numeric.hex.nova",
                    "match": "\\b0[xX][0-9a-fA-F]+\\b"
                },
                {
                    "name": "constant.numeric.binary.nova",
                    "match": "\\b0[bB][01]+\\b"
                },
                {
                    "name": "constant.numeric.octal.nova",
                    "match": "\\b0[oO][0-7]+\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.compound.nova",
                    "match": "(\\+=|\\-=|\\*=|/=|%=)"
                },
                {
                    "name": "keyword.operator.assignment.nova",
                    "match": "="
                },
                {
                    "name": "keyword.operator.comparison.nova",
                    "match": "(==|!=|<=|>=|<|>)"
                },
                {
                    "name": "keyword.operator.arithmetic.nova",
                    "match": "(\\*\\*|\\+|\\-|\\*|/|%)"
                },
                {
                    "name": "keyword.operator.logical.nova",
                    "match": "(&&|\\|\\||!)"
                },
                {
                    "name": "keyword.operator.bitwise.nova",
                    "match": "(&|\\||\\^|~|<<|>>)"
                },
                {
                    "name": "keyword.operator.arrow.nova",
                    "match": "(->|=>)"
                },
                {
                    "name": "keyword.operator.question.nova",
                    "match": "(\\?\\?|\\?)"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "meta.function.definition.nova",
                    "begin": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                    "beginCaptures": {
                        "1": {"name": "storage.type.function.nova"},
                        "2": {"name": "entity.name.function.nova"}
                    },
                    "end": "\\)",
                    "patterns": [
                        {"include": "#function-parameters"}
                    ]
                },
                {
                    "name": "meta.method.definition.nova",
                    "begin": "\\b(public|private|static|async)?\\s*(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                    "beginCaptures": {
                        "1": {"name": "storage.modifier.nova"},
                        "2": {"name": "storage.type.function.nova"},
                        "3": {"name": "entity.name.function.method.nova"}
                    },
                    "end": "\\)",
                    "patterns": [
                        {"include": "#function-parameters"}
                    ]
                },
                {
                    "name": "meta.function.call.nova",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
                    "captures": {
                        "1": {"name": "entity.name.function.call.nova"}
                    }
                }
            ]
        },
        "classes": {
            "patterns": [
                {
                    "name": "meta.class.nova",
                    "begin": "\\b(class)\\s+([A-Z][a-zA-Z0-9_]*)",
                    "beginCaptures": {
                        "1": {"name": "storage.type.class.nova"},
                        "2": {"name": "entity.name.type.class.nova"}
                    },
                    "end": "(?=\\{)",
                    "patterns": [
                        {
                            "name": "meta.class.inheritance.nova",
                            "begin": "\\b(extends)\\s+([A-Z][a-zA-Z0-9_]*)",
                            "beginCaptures": {
                                "1": {"name": "keyword.control.inheritance.nova"},
                                "2": {"name": "entity.other.inherited-class.nova"}
                            },
                            "end": "(?=\\{)"
                        }
                    ]
                },
                {
                    "name": "meta.constructor.nova",
                    "begin": "\\b(constructor)\\s*\\(",
                    "beginCaptures": {
                        "1": {"name": "entity.name.function.constructor.nova"}
                    },
                    "end": "\\)",
                    "patterns": [
                        {"include": "#function-parameters"}
                    ]
                }
            ]
        },
        "builtin-functions": {
            "patterns": [
                {
                    "name": "support.function.builtin.console.nova",
                    "match": "\\b(print|println|log|warn|error)\\b"
                },
                {
                    "name": "support.function.builtin.type.nova",
                    "match": "\\b(type|str|num|bool|array)\\b"
                },
                {
                    "name": "support.function.builtin.collection.nova",
                    "match": "\\b(len|push|pop|split|join|filter|map|reduce|sort|reverse)\\b"
                },
                {
                    "name": "support.function.builtin.math.nova",
                    "match": "\\b(abs|max|min|sqrt|pow|floor|ceil|round|sin|cos|tan|random|pi|e)\\b"
                },
                {
                    "name": "support.function.builtin.string.nova",
                    "match": "\\b(trim|toLowerCase|toUpperCase|charAt|indexOf|substring|replace|contains)\\b"
                },
                {
                    "name": "support.function.builtin.io.nova",
                    "match": "\\b(read|write|readFile|writeFile|exists|mkdir|rmdir)\\b"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.property.nova",
                    "match": "(?<=\\.)\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
                {
                    "name": "variable.other.constant.nova",
                    "match": "\\b[A-Z][A-Z0-9_]*\\b"
                },
                {
                    "name": "variable.other.readwrite.nova",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.section.block.begin.nova",
                    "match": "\\{"
                },
                {
                    "name": "punctuation.section.block.end.nova",
                    "match": "\\}"
                },
                {
                    "name": "punctuation.section.brackets.begin.nova",
                    "match": "\\["
                },
                {
                    "name": "punctuation.section.brackets.end.nova",
                    "match": "\\]"
                },
                {
                    "name": "punctuation.section.parens.begin.nova",
                    "match": "\\("
                },
                {
                    "name": "punctuation.section.parens.end.nova",
                    "match": "\\)"
                },
                {
                    "name": "punctuation.separator.comma.nova",
                    "match": ","
                },
                {
                    "name": "punctuation.terminator.statement.nova",
                    "match": ";"
                },
                {
                    "name": "punctuation.accessor.nova",
                    "match": "\\."
                },
                {
                    "name": "punctuation.separator.colon.nova",
                    "match": ":"
                }
            ]
        },
        "function-parameters": {
            "patterns": [
                {
                    "name": "variable.parameter.nova",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
                {
                    "name": "punctuation.separator.parameter.nova",
                    "match": ","
                }
            ]
        }
    },
    "scopeName": "source.nova",
    "fileTypes": ["nova"]
}